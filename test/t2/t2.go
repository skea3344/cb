package main

import (
	"fmt"
	"reflect"
	"yf/platform/yfredis"
)

func main() {
	redis, err := yfredis.NewYFRedis("127.0.0.1", 6379)
	if err != nil {
		fmt.Println(err)
	}
	defer redis.Close()
	k := "my_first_key"
	redis.Set(k, "Hello world!")

	fmt.Println(redis.Get(k))

	redis.SetInt(k, 100)

	fmt.Println(redis.GetInt(k))

	fmt.Println(redis.GetInt("k2"))
	redis.SetFloat64("k3", 3.1415)
	fmt.Println(redis.GetFloat64("k3"))
	fmt.Println(redis.Incr("k4"))
	fmt.Println(redis.Incrby("k5", 10))
	fmt.Println(redis.Decr("k6"))
	fmt.Println(redis.Decrby("k6", 100))
	// fmt.Println(redis.IncrbyFloat64("k7", 0.01))
	fmt.Println(redis.Append(k, "Good!"))
	fmt.Println(redis.GetRange(k, 2, 3))
	fmt.Println(redis.SetRange(k, 0, "hes"))
	fmt.Println(redis.Get(k))
	fmt.Println("----------------------我是一条分割线")
	fmt.Println(redis.Del("k7"))
	fmt.Println(redis.Del("k8"))
	fmt.Println(redis.Del("k9"))
	redis.SetBit("k7", 2, 1)
	redis.SetBit("k8", 7, 1)
	keys := []string{"k7", "k8"}
	fmt.Println(redis.BitOP("OR", "k9", keys))
	fmt.Println(redis.Get("k9"))
	fmt.Println("----------------------我是一条分割线")
	redis.Del("k10")
	fmt.Println(redis.RPush("k10", "aaa", "bbb", "ccc"))
	fmt.Println(redis.LPush("k10", "ddd", "eee", "fff"))
	fmt.Println(redis.RPop("k10"))
	fmt.Println(redis.LPop("k10"))
	fmt.Println(redis.LIndex("k10", 2))
	fmt.Println(redis.LIndex("k10", 2))
	fmt.Println(redis.LRange("k10", 0, -1))
	fmt.Println(redis.LTrim("k10", 1, 2))
	// go func() {
	//
	// 	redis2, _ := yfredis.NewYFRedis("127.0.0.1", 6379)
	// 	time.Sleep(3 * time.Second)
	// 	defer redis2.Close()
	// 	redis2.RPush("k11", "ggg")
	// }()
	// fmt.Println(redis.BRPop("k11", 5))
	fmt.Println("----------------------我是一条分割线")
	redis.Del("k11")
	fmt.Println(redis.BRPopLPush("k10", "k11", 5))
	fmt.Println(redis.LRange("k11", 0, -1))
	fmt.Println(redis.LRange("k10", 0, -1))
	fmt.Println(redis.ClientList())
	fmt.Println("----------------------我是一条分割线")
	redis.Del("k12")
	fmt.Println(redis.SAdd("k12", 111, "aaa"))
	fmt.Println(redis.SRem("k12", "111"))
	fmt.Println(redis.SIsMember("k12", "aaa"))
	fmt.Println(redis.SIsMember("k12", 111))
	fmt.Println(redis.SAdd("k12", 222, "bbb"))
	fmt.Println(redis.SCard("k12"))
	for i := 0; i < 5; i++ {
		fmt.Println(redis.SRandMember("k12", -3))
	}
	fmt.Println(redis.SMembers("k12"))
	fmt.Println(redis.SPop("k12"))
	fmt.Println("----------------------我是一条分割线")
	redis.Del("k13")
	redis.Del("k14")
	redis.Del("k15")
	redis.Del("k16")
	redis.SAdd("k13", "aaa", "bbbb", "cccc", "dddd")
	redis.SAdd("k14", "aaa")
	redis.SAdd("k15", "cccc", "aaa", "eee")
	fmt.Println(redis.SUnionStore("k16", "k13", "k14", "k15"))
	fmt.Println(redis.SMembers("k16"))
	fmt.Println("----------------------我是一条分割线")
	redis.Del("k17")
	fmt.Println(redis.HMSet("k17", "aaa", 1, "bbb", 2))
	fmt.Println(redis.HMGet("k17", "ddd", "fff"))

	fmt.Println(redis.HSet("k17", "ccc", 3))
	fmt.Println(redis.HGet("k17", "ddd"))
	fmt.Println(redis.HExists("k17", "ddd"))
	fmt.Println(redis.HKeys("k17"))
	fmt.Println(redis.HVals("k17"))
	fmt.Println(redis.HGetAll("k17"))
	fmt.Println(redis.HGetAllInt("k17"))
	fmt.Println(redis.HIncrby("k17", "ddd", 4))
	fmt.Println(redis.HIncrbyFloat("k17", "eee", 5.5))
	fmt.Println(redis.HGetAll("k17"))
	fmt.Println("----------------------我是一条分割线")
	redis.Del("k18")
	fmt.Println(redis.ZAdd("k18", 1, "aaa", 2, "bbb", 3, "ccc", 4, "ddd"))
	// fmt.Println(redis.ZRem("k18", "aaa", "ccc"))
	fmt.Println(redis.ZCard("k18"))
	fmt.Println(redis.ZIncrby("k18", 5.3, "eee"))
	fmt.Println(redis.ZCount("k18", 3, 5.3))
	fmt.Println(redis.ZRank("k18", "aaa"))
	fmt.Println(redis.ZScore("k18", "eee"))
	fmt.Println(redis.ZRange("k18", 0, 5))
	fmt.Println(redis.ZRangeWithScores("k18", 0, 5))
	fmt.Println(redis.ZRevRank("k18", "aaa"))
	fmt.Println(redis.ZRemRangeByScore("k18", 2, 4))
	fmt.Println(redis.ZRange("k18", 0, 5))
	fmt.Println("----------------------我是一条分割线")
	fmt.Println(redis.ZRank("k18", "aaa"))
	redis.Del("foo")
	redis.Del("bar")
	redis.Conn().Send("MULTI")
	redis.Conn().Send("INCRBY", "foo", 10)
	redis.Conn().Send("INCRBY", "bar", 20)
	r, err := redis.Conn().Do("EXEC")
	fmt.Println(r)
	redis.Conn().Send("GET", "foo")
	redis.Conn().Send("GET", "bar")
	redis.Conn().Flush()
	ret, _ := redis.Conn().Receive()
	fmt.Println(reflect.TypeOf(ret))
	fmt.Println(redis.Conn().Receive())
	fmt.Println(redis.Conn().Receive())
}
